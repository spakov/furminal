<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AcrylicWindowBackdropName" xml:space="preserve">
    <value>Acrylic</value>
  </data>
  <data name="AdvancedName" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="BasicsWorkingDirectoryName" xml:space="preserve">
    <value>Working directory</value>
  </data>
  <data name="BlackBrightColorName" xml:space="preserve">
    <value>Bright black</value>
  </data>
  <data name="BlackStandardColorName" xml:space="preserve">
    <value>Black</value>
  </data>
  <data name="BlueBrightColorName" xml:space="preserve">
    <value>Bright blue</value>
  </data>
  <data name="BlueStandardColorName" xml:space="preserve">
    <value>Blue</value>
  </data>
  <data name="BlurredWindowBackdropName" xml:space="preserve">
    <value>Blurred</value>
  </data>
  <data name="BrightColorsName" xml:space="preserve">
    <value>Bright colors</value>
  </data>
  <data name="CloseButtonCaption" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="ColorPaletteName" xml:space="preserve">
    <value>Color Palette</value>
  </data>
  <data name="ColumnsOptionDescription" xml:space="preserve">
    <value>The number of terminal columns</value>
  </data>
  <data name="CommandArgumentDescription" xml:space="preserve">
    <value>The command to run, usually a shell</value>
  </data>
  <data name="CommandExplanation" xml:space="preserve">
    <value>This is typically a shell.</value>
  </data>
  <data name="CommandLineError" xml:space="preserve">
    <value>Error: {0}</value>
  </data>
  <data name="CommandName" xml:space="preserve">
    <value>Command</value>
  </data>
  <data name="CouldNotLoadSettings" xml:space="preserve">
    <value>Could not load settings</value>
  </data>
  <data name="CouldNotReadSettings" xml:space="preserve">
    <value>Could not read settings</value>
  </data>
  <data name="CouldNotSaveSettings" xml:space="preserve">
    <value>Could not save settings</value>
  </data>
  <data name="CyanBrightColorName" xml:space="preserve">
    <value>Bright cyan</value>
  </data>
  <data name="CyanStandardColorName" xml:space="preserve">
    <value>Cyan</value>
  </data>
  <data name="DefaultBackgroundColorName" xml:space="preserve">
    <value>Default background color</value>
  </data>
  <data name="DefaultBackgroundColorWindowBackdropName" xml:space="preserve">
    <value>Color palette default background color</value>
  </data>
  <data name="DefaultColorsName" xml:space="preserve">
    <value>Default colors</value>
  </data>
  <data name="DefaultForegroundColorName" xml:space="preserve">
    <value>Default foreground color</value>
  </data>
  <data name="DefaultSettingsHaveBeenSaved" xml:space="preserve">
    <value>Default settings have been saved.</value>
  </data>
  <data name="DefaultUnderlineColorName" xml:space="preserve">
    <value>Default underline color</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>The w6t terminal emulator.</value>
  </data>
  <data name="GreenBrightColorName" xml:space="preserve">
    <value>Bright green</value>
  </data>
  <data name="GreenStandardColorName" xml:space="preserve">
    <value>Green</value>
  </data>
  <data name="MagentaBrightColorName" xml:space="preserve">
    <value>Bright magenta</value>
  </data>
  <data name="MagentaStandardColorName" xml:space="preserve">
    <value>Magenta</value>
  </data>
  <data name="MicaWindowBackdropName" xml:space="preserve">
    <value>Mica</value>
  </data>
  <data name="NonNullStartDirectoryExplanation" xml:space="preserve">
    <value>Change to the start directory only when the system default is inherited from the parent process.</value>
  </data>
  <data name="NullStartDirectoryExplanation" xml:space="preserve">
    <value>Always keep the working directory inherited from the parent process, even if it’s the system default.</value>
  </data>
  <data name="NullStartDirectoryName" xml:space="preserve">
    <value>Always use inherited working directory</value>
  </data>
  <data name="OpenSettingsJsonLocationName" xml:space="preserve">
    <value>Show settings.json in Explorer</value>
  </data>
  <data name="RedBrightColorName" xml:space="preserve">
    <value>Bright red</value>
  </data>
  <data name="RedStandardColorName" xml:space="preserve">
    <value>Red</value>
  </data>
  <data name="RowsOptionDescription" xml:space="preserve">
    <value>The number of terminal rows</value>
  </data>
  <data name="SchemaHasBeenGenerated" xml:space="preserve">
    <value>Schema has been generated at {0}.</value>
  </data>
  <data name="SettingsJsonLocationExplanation" xml:space="preserve">
    <value>The w6t settings.json file is located at {0}. While the Settings window is open, w6t will automatically load it when the file is written.</value>
  </data>
  <data name="SettingsSaved" xml:space="preserve">
    <value>Settings saved</value>
  </data>
  <data name="SolidColorWindowBackdropColorName" xml:space="preserve">
    <value>Solid color window backdrop color</value>
  </data>
  <data name="SolidColorWindowBackdropName" xml:space="preserve">
    <value>Solid color</value>
  </data>
  <data name="StandardColorsName" xml:space="preserve">
    <value>Standard colors</value>
  </data>
  <data name="StartDirectoryName" xml:space="preserve">
    <value>Start in</value>
  </data>
  <data name="TransparentWindowBackdropName" xml:space="preserve">
    <value>Transparent</value>
  </data>
  <data name="VisualBellDisplayTimeExplanation" xml:space="preserve">
    <value>In seconds.</value>
  </data>
  <data name="VisualBellDisplayTimeName" xml:space="preserve">
    <value>Visual bell display time</value>
  </data>
  <data name="W6tSchemaGenerated" xml:space="preserve">
    <value>w6t Schema Generated</value>
  </data>
  <data name="WhiteBrightColorName" xml:space="preserve">
    <value>Bright white</value>
  </data>
  <data name="WhiteStandardColorName" xml:space="preserve">
    <value>White</value>
  </data>
  <data name="WindowBackdropName" xml:space="preserve">
    <value>Window backdrop</value>
  </data>
  <data name="YellowBrightColorName" xml:space="preserve">
    <value>Bright yellow</value>
  </data>
  <data name="YellowStandardColorName" xml:space="preserve">
    <value>Yellow</value>
  </data>
</root>